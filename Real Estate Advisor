#include <stdio.h>
#include <stdlib.h>

struct sell {
    int prop_id;
    char name[25];
    float price;
};

struct buy {
    int prop_id;
    char name[25];
    float budget;
};

struct edit {
    int prop_id;
    char name[25];
    float budget;
};

struct del {
    int prop_id;
};

int add();
int display();
int search();
int buy_sell();
int edit_delete();

int main() {
    int n;
    printf("Enter choice:\n1.Add\n2.Display\n3.Search\n4.Buy/Sell\n5.Edit/Delete\n");
    scanf("%d", &n);

    switch(n) {
        case 1: add(); break;
        case 2: display(); break;
        case 3: search(); break;
        case 4: buy_sell(); break;
        case 5: edit_delete(); break;
        default: printf("Invalid number.\n");
    }
    return 0;
}

int add() {
    int n;
    printf("ENTER YOUR CHOICE TO ADD RECORDS (1: FLATS, 2: LAND, 3: BANK DETAILS): ");
    scanf("%d", &n);
    getchar();

    FILE* fp;
    char c;

    switch(n) {
        case 1:
            fp = fopen("flatrecords.txt", "a");
            break;
        case 2:
            fp = fopen("landrecords.txt", "a");
            break;
        case 3:
            fp = fopen("bankrecords.txt", "a");
            break;
        default:
            printf("INVALID CHOICE\n");
            return 0;
    }

    if (!fp) { perror("Error"); return 1; }
    printf("Enter details (Ctrl+Z to stop):\n");
    while ((c = getchar()) != EOF) putc(c, fp);
    fclose(fp);

    return 0;
}

int display() {
    int n;
    printf("ENTER YOUR CHOICE TO DISPLAY RECORDS (1: FLATS, 2: LAND): ");
    scanf("%d", &n);

    FILE* fp;
    char c;

    if (n == 1) {
        fp = fopen("flatrecords.txt", "r");
        printf("Flat Records:\n");
    } else if (n == 2) {
        fp = fopen("landrecords.txt", "r");
        printf("Land Records:\n");
    } else {
        printf("INVALID CHOICE\n");
        return 0;
    }

    if (!fp) { perror("Error"); return 1; }
    while ((c = getc(fp)) != EOF) printf("%c", c);
    fclose(fp);
    return 0;
}

int search() {
    int n, id;
    printf("ENTER YOUR CHOICE TO SEARCH (1: FLATS, 2: LAND, 3: BANK): ");
    scanf("%d", &n);
    printf("Enter ID to search: ");
    scanf("%d", &id);

    FILE* fp;
    char c;

    if (n == 1) {
        fp = fopen("flatrecords.txt", "r");
        printf("Flat Record for ID %d:\n", id);
    } else if (n == 2) {
        fp = fopen("landrecords.txt", "r");
        printf("Land Record for ID %d:\n", id);
    } else if (n == 3) {
        fp = fopen("bankrecords.txt", "r");
        printf("Bank Record for ID %d:\n", id);
    } else {
        printf("INVALID CHOICE\n");
        return 0;
    }

    if (!fp) { perror("Error"); return 1; }
    while ((c = getc(fp)) != EOF) printf("%c", c);
    fclose(fp);
    return 0;
}

int buy_sell() {
    int n;
    printf("ENTER YOUR CHOICE (1: BUY, 2: SELL): ");
    scanf("%d", &n);

    if (n == 1) {
        struct buy b;
        printf("Enter property ID: "); scanf("%d", &b.prop_id);
        printf("Enter your name: "); scanf("%s", b.name);
        printf("Enter your budget: "); scanf("%f", &b.budget);
        int method;
        printf("Select payment method:\n1.Online\n2.Net Banking\n3.Offline\n");
        scanf("%d", &method);
        printf("Payment completed.\nThank you for buying.\n");
    } else if (n == 2) {
        struct sell s;
        printf("Enter property ID: "); scanf("%d", &s.prop_id);
        printf("Enter your name: "); scanf("%s", s.name);
        printf("Enter price: "); scanf("%f", &s.price);
        printf("Thank you for selling.\n");
    } else {
        printf("INVALID CHOICE\n");
    }
    return 0;
}

int edit_delete() {
    int n;
    printf("ENTER YOUR CHOICE (1: UPDATE, 2: DELETE): ");
    scanf("%d", &n);

    if (n == 1) {
        struct edit e;
        printf("Enter ID to update: "); scanf("%d", &e.prop_id);
        printf("Enter name: "); scanf("%s", e.name);
        printf("Enter updated budget: "); scanf("%f", &e.budget);
        FILE* fp = fopen("records.txt", "a");
        if (!fp) { perror("Error"); return 1; }
        fprintf(fp, "ID: %d, Name: %s, Budget: %.2f\n", e.prop_id, e.name, e.budget);
        fclose(fp);
        printf("RECORDS UPDATED\n-------------------------------\n");
    } else if (n == 2) {
        struct del d;
        printf("Enter ID to delete: "); scanf("%d", &d.prop_id);
        printf("RECORDS DELETED (simulation only).\n");
    } else {
        printf("INVALID CHOICE\n");
    }
    return 0;
}
